{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DARTS nextgen","text":"<p>Panarctic Database of Active Layer Detatchment Slides and Retrogressive Thaw Slumps from Deep Learning on High Resolution Satellite Imagery. This is te successor of the thaw-slump-segmentation (pipeline), with which the first version of the DARTS dataset was created.</p> Table of Contents<ul> <li>DARTS nextgen<ul> <li>Environment installation</li> <li>Contribute</li> </ul> </li> </ul>"},{"location":"#environment-installation","title":"Environment installation","text":"<p>TODO: Copy from confluence and setup gdal and torch in each (relevant) package</p>"},{"location":"#contribute","title":"Contribute","text":"<p>Before contributing please contact one of the authors and make sure to read the Contribution Guidelines.</p>"},{"location":"contribute/","title":"Contribute","text":"<p>This page is also meant for internal documentation.</p>"},{"location":"contribute/#editor-setup","title":"Editor setup","text":"<p>There is only setup files provided for VSCode and no other editor (yet). A list of extensions and some settings can be found in the <code>.vscode</code>. At the first start, VSCode should ask you if you want to install the recommended extension. The settings should be automaticly used by VSCode. Both should provide the developers with a better experience and enforce code-style.</p>"},{"location":"contribute/#architecture-describtion","title":"Architecture describtion","text":"<p>This repository is a workspace repository, managed by Rye. Read more about workspaces at the Rye docs. Each workspace-member starts with <code>darts-*</code> and can be seen as an own package, exexpt the <code>darts-pipeline</code> member. Each package has it's own internal functions and it's public facing API. The public facing API of each package MUST follow the following section API paradigms. The <code>darts-pipeline</code> is a <code>virtual</code> project, hence it can't be installed as a package and has no public facing API.</p> Package Name Type Description (Major) Dependencies - all need Xarray Public Methods* <code>darts-ensemble</code> Ensemble Ensembles the different models and run the multi-stage inference pipeline. PyTorch, <code>darts-superresolution</code>, <code>darts-detection</code>, <code>darts-segmentation</code> <code>Ensemble.infer</code> <code>darts-preprocessing</code> Data Loads data and combines the features to a Xarray Dataset GDAL <code>scene_to_tiles</code>, <code>preprocess</code> <code>darts-acquisition</code> Data Fetches data from the data sources GEE, rasterio, ? <code>fetch_tcvis</code>, <code>fetch_s2</code>, <code>fetch_planet</code> <code>darts-export</code> Data Saves the results from inference and combines the result to the final DARTS dataset GeoPandas, Scipy, Cucim <code>export_tile</code> <code>darts-superresolution</code> Train Trains a supper resolution model to scale Sentinel 2 images from 10m to 3m resolution PyTorch TBD <code>darts-detection</code> Train Trains an object detection model PyTorch TBD <code>darts-segmentation</code> Train Trains an segmentation model PyTorch, segmentation_models_pytorch TBD <code>darts-?</code> Train Trains a ? ? TBD <code>darts-evaluation</code> Test Evaluates the end-to-end process on a test dataset and external dataset GeoPandas <code>test_lewkowicz</code>, <code>test_ensemble</code> <code>darts-utils</code> Data Shared utilities for data processing Scipy, Cucim, GeoPandas TBD <code>darts-train-utils</code> Train Shared utilities for training PyTorch TBD <p>* : These public facing function (-names) are no hard requirements, they should rather help getting an idea of what and where needs to be implemented.</p> <p>The <code>darts-pipeline</code> utilized Ray to automaticly parallize the different computations. However, each package should be designed so that one could build their own pipeline without Ray. Hence, all Ray-related functions / transformations etc. should be defined in the <code>darts-pipeline</code> project.</p> <p>The packages can decide to wrap their public functions into a CLI with typer.</p> <p>The <code>Train</code> packages should also hold the code for training specific data preparation, model training and model evaluation. These packages should get their data from (already processed) data from the <code>darts-preprocessing</code> package. They should expose a statefull Model class with an <code>inference</code> function, which can be used by the <code>darts-ensemble</code> package.</p> <p>TBD: Would it be better if all \"inference\" functions are part of the <code>darts-ensemble</code> package? This would remove the dependency to each of the training repositories and with that potential dependencies to unused training-specific libraries (e.g. pytorch lightning) TBD: Should the <code>darts-ensemble</code> package be split into <code>darts-inference</code> and <code>darts-ensemble</code>? - No TBD: Should the <code>darts-evaluation</code> package be merged into the <code>darts-ensemble</code> package? - No  </p> <p>The packages should follow this architecture: </p>"},{"location":"contribute/#conceptual-migration-from-thaw-slump-segmentation","title":"Conceptual migration from thaw-slump-segmentation","text":"<ul> <li>The <code>darts-ensemble</code> package is the successor of the <code>process-02-inference</code> and <code>process-03-ensemble</code> scripts.</li> <li>The <code>darts-preprocessing</code> and <code>darts-acquisition</code> packages are the successors of the <code>setup-raw-data</code> script and manual work of obtaining data.</li> <li>The <code>darts-export</code> package is splitted from the  <code>inference</code> script, should include the previous manual works of combining everything into the final dataset.</li> <li>The <code>darts-superresolution</code> package is the successor of the <code>superresolution</code> repository.</li> <li>The <code>darts-detection</code> package is a new package.</li> <li>The <code>darts-segmentation</code> package is the successor of the <code>train</code> and <code>prepare_data</code> script.</li> <li>The <code>darts-evaluation</code> package is the successor of the different manual evaluations.</li> </ul>"},{"location":"contribute/#inference-pipeline-steps","title":"Inference pipeline steps","text":"<p>TODO: This is a draft and should be discussed</p>"},{"location":"contribute/#api-paradigms","title":"API paradigms","text":"<p>The packages should pass the data as Xarray Datasets between each other. Datasets can hold coordinate information aswell as other metadata (like CRS) in a single self-describing object. Since different <code>tiles</code> do not share the same coordinates or metadata, each <code>tile</code> should be represented by a single Xarray <code>Dataset</code>.</p> <ul> <li>Each public facing API function which in some way transforms data should accept a Xarray Dataset as input and return an Xarray Dataset.</li> <li>Data can also be accepted as a list of Xarray Dataset as input and returned as a list of Xarray Datasets for batched processing.     In this case, concattenation should happend internally and on <code>numpy</code> or <code>pytorch</code> level, NOT on <code>xarray</code> abstraction level.     The reason behind this it that the tiles don't share their coordinates, resulting in a lot of empty spaces between the tiles and high memory usage.     The name of the function should then be <code>function_batched</code>.</li> <li>Each public facing API function which loads data should return a single Xarray Dataset for each <code>tile</code>.</li> <li>Data should NOT be saved to file internally, with <code>darts-export</code> as the only exception. Instead, data should returned in-memory as a Xarray Dataset, so the user / pipeline can decide what to save and when.</li> <li>Function names should be verbs, e.g. <code>process</code>, <code>ensemble</code>, <code>do_inference</code>.</li> <li>If a function is stateless it should NOT be part of a class or wrapper</li> <li>If a function is stateful it should be part of a class or wrapper, this is important for Ray</li> </ul> <p>Here are some examples, how these API paradigms should look like.</p> <ol> <li> <p>Single transformation</p> <pre><code>import darts-package\nimport xarray as xr\n\n# User loads / creates the dataset (a single tile) by themself\nds = xr.open_dataset(\"...\")\n\n# User calls the function to transform the dataset\nds = darts-package.transform(ds, **kwargs)\n\n# User can decide by themself what to do next, e.g. save\nds.to_netcdf(\"...\")\n</code></pre> </li> <li> <p>Batched transformation</p> <pre><code>import darts_package\nimport xarray as xr\n\n# User loads / creates multiple datasets (hence, multiple tiles) by themself\ndata = [xr.open_dataset(\"...\"), xr.open_dataset(\"...\"), ...]\n\n# User calls the function to transform the dataset\ndata = darts_package.transform_batched(data, **kwargs)\n\n# User can decide by themself what to do next\ndata[0].whatever()\n</code></pre> </li> <li> <p>Load &amp; preprocess some data</p> <pre><code>import darts_package\n\n# User calls the function to transform the dataset\nds = darts_package.load(\"path/to/data\", **kwargs)\n\n# User can decide by themself what to do next\nds.whatever()\n</code></pre> </li> <li> <p>Custom pipeline example</p> <pre><code>from pathlib import Path\nimport darts_preprocess\nimport darts_inference\n\nDATA_DIR = Path(\"./data/\")\nMODEL_DIR = Path(\"./models/\")\nOUT_DIR = Path(\"./out/\")\n\n# Inference is a stateful transformation, because it needs to load the model\n# Hence, the \nensemble = darts_inference.Ensemble.load(MODEL_DIR)\n\n# The data directory contains subfolders which then hold the input data\nfor dir in DATA_DIR:\n    name = dir.name\n\n    # Load the files from the processing directory\n    ds = darts_preprocess.load_and_preprocess(dir)\n\n    # Do the inferencce\n    ds = ensemble.inference(ds)\n\n    # Save the results\n    ds.to_netcdf(OUT_DIR / f\"{name}-result.nc\")\n</code></pre> </li> <li> <p>Pipeline with Ray</p> <pre><code>from dataclasses import dataclass\nfrom pathlib import Path\nimport ray\nimport darts_preprocess\nimport darts_inference\nimport darts_export\n\nDATA_DIR = Path(\"./data/\")\nMODEL_DIR = Path(\"./models/\")\nOUT_DIR = Path(\"./out/\")\n\nray.init()\n\n# We need to wrap the Xarray dataset in a class, so that Ray can serialize it\n@dataclass\nclass Tile:\n    ds: xr.Dataset\n\n# Wrapper for ray\ndef open_dataset_ray(row: dict[str, Any]) -&gt; dict[str, Any]:\n    data = xr.open_dataset(row[\"path\"])\n    tile = Tile(data)\n    return {\n        \"input\": tile,\n    }\n\n# Wrapper for the preprocessing -&gt; Stateless\ndef preprocess_tile_ray(row: dict[str, Tile]) -&gt; dict[str, Tile]:\n    ds = darts_preprocess.preprocess(row[\"input\"].ds)\n    return {\n        \"preprocessed\": Tile(ds),\n        \"input\": row[\"input\"]\n    }\n\n# Wrapper for the inference -&gt; Statefull\nclass EnsembleRay:\n    def __init__(self):\n        self.ensemble = darts_inference.Ensemble.load(MODEL_DIR)\n\n    def __call__(self, row: dict[str, Tile]) -&gt; dict[str, Tile]:\n        ds = self.ensemble.inference(row[\"preprocessed\"].ds)\n        return {\n            \"output\": Tile(ds),\n            \"preprocessed\": row[\"preprocessed\"],\n            \"input\": row[\"input\"],\n        }\n\n# We need to add 'local:///' to tell ray that we want to use the local filesystem\nfiles = data.glob(\"*.nc\")\nfile_list = [f\"local:////{file.resolve().absolute()}\" for file in files]\n\nds = ray.data.read_binary_files(file_list, include_paths=True)\nds = ds.map(open_dataset_ray) # Lazy open\nds = ds.map(preprocess_tile_ray) # Lazy preprocess\nds = ds.map(EnsembleRay) # Lazy inference\n\n# Save the results\nfor row in ds.iter_rows():\n    darts_export.save(row[\"output\"].ds, OUT_DIR / f\"{row['input'].ds.name}-result.nc\")\n</code></pre> </li> </ol>"},{"location":"contribute/#about-the-xarray-overhead-with-ray","title":"About the Xarray overhead with Ray","text":"<p>Ray expects batched data to be in either numpy or pandas format and can't work with Xarray datasets directly. Hence, a wrapper with custom stacking functions is needed. This tradeoff is not small, however, the benefits in terms of maintainability and readability are worth it.</p> <p></p>"},{"location":"contribute/#package-dependencies","title":"Package dependencies","text":"<p>Each package should define it's own dependencies in it's respective <code>pyproject.toml</code> file. Also, the dependencies should be as minimal as possible. Especially with <code>gdal</code> and <code>torch</code>, they should only be required where needed, since their setup is more complicated.</p>"},{"location":"contribute/#new-package","title":"New package","text":"<p>A new package can easily created with:</p> <pre><code>rye init darts-packagename\n</code></pre> <p>Rye creates a minimal project structure for us.</p> <p>The following things needs to be updates:</p> <ol> <li>The <code>pyproject.toml</code> file inside the new package.</li> </ol> <p>Add to the <code>pyproject.toml</code> file inside the new package is the following to enable Ruff:</p> <pre><code>```toml\n[tool.ruff]\n# Extend the `pyproject.toml` file in the parent directory...\nextend = \"../pyproject.toml\"\n```\n\nPlease also provide a description and a list of authors to the file.\n</code></pre> <ol> <li> <p>The <code>.github/workflows/update_version.yml</code> file, to include the package in the workflow.</p> <p>Under <code>package</code> and under step <code>Update version in pyproject.toml</code>.</p> </li> <li> <p>The docs by creating a new directory with a <code>quickstart.md</code> and a <code>ref.md</code> (and optionally more) and add them to the nav inside the <code>mkdocs.yml</code>.</p> <p>To enable code detection, also add the package directory under <code>plugins</code> in the <code>mkdocs.yml</code>. Please also add the refs to the top-level <code>ref.md</code>.</p> </li> <li> <p>The Readme of the package</p> </li> </ol>"},{"location":"contribute/#documentation","title":"Documentation","text":"<p>The documentation is made with Material for Mkdocs. To build and serve locally the docs you need run with rye:</p> <pre><code>rye run mkdocs serve\n</code></pre>"},{"location":"ref/","title":"Combined Reference","text":"<p>All references on one page</p> Table of Contents<ul> <li>Combined Reference<ul> <li>\u00a0darts_acquisition<ul> <li>Functions<ul> <li>\u00a0hello</li> </ul> </li> </ul> </li> <li>\u00a0darts_ensemble<ul> <li>Functions<ul> <li>\u00a0hello</li> </ul> </li> </ul> </li> <li>\u00a0darts_export<ul> <li>Functions<ul> <li>\u00a0hello</li> </ul> </li> </ul> </li> <li>\u00a0darts_preprocessing<ul> <li>Functions<ul> <li>\u00a0hello</li> </ul> </li> </ul> </li> <li>\u00a0darts_segmentation<ul> <li>Functions<ul> <li>\u00a0hello</li> </ul> </li> </ul> </li> <li>\u00a0darts_superresolution<ul> <li>Functions<ul> <li>\u00a0hello</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"ref/#darts_acquisition","title":"<code>darts_acquisition</code>","text":"<p>Acquisition of data from various sources for the DARTS dataset.</p>"},{"location":"ref/#darts_acquisition-functions","title":"Functions","text":""},{"location":"ref/#darts_acquisition.hello","title":"<code>hello(name)</code>","text":"<p>Say hello to the user.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the user.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-acquisition/src/darts_acquisition/__init__.py</code> <pre><code>def hello(name: str) -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Args:\n        name (str): Name of the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return f\"Hello, {name}, from darts-acquisition!\"\n</code></pre>"},{"location":"ref/#darts_ensemble","title":"<code>darts_ensemble</code>","text":"<p>Inference and model ensembling for the DARTS dataset.</p>"},{"location":"ref/#darts_ensemble-functions","title":"Functions","text":""},{"location":"ref/#darts_ensemble.hello","title":"<code>hello()</code>","text":"<p>Say hello to the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-ensemble/src/darts_ensemble/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return \"Hello from darts-ensemble!\"\n</code></pre>"},{"location":"ref/#darts_export","title":"<code>darts_export</code>","text":"<p>Dataset export for the DARTS dataset.</p>"},{"location":"ref/#darts_export-functions","title":"Functions","text":""},{"location":"ref/#darts_export.hello","title":"<code>hello()</code>","text":"<p>Say hello to the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-export/src/darts_export/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return \"Hello from darts-export!\"\n</code></pre>"},{"location":"ref/#darts_preprocessing","title":"<code>darts_preprocessing</code>","text":"<p>Data preprocessing and feature engineering for the DARTS dataset.</p>"},{"location":"ref/#darts_preprocessing-functions","title":"Functions","text":""},{"location":"ref/#darts_preprocessing.hello","title":"<code>hello()</code>","text":"<p>Say hello to the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-preprocessing/src/darts_preprocessing/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return \"Hello from darts-preprocessing!\"\n</code></pre>"},{"location":"ref/#darts_segmentation","title":"<code>darts_segmentation</code>","text":"<p>Image segmentation of thaw-slumps for the DARTS dataset.</p>"},{"location":"ref/#darts_segmentation-functions","title":"Functions","text":""},{"location":"ref/#darts_segmentation.hello","title":"<code>hello()</code>","text":"<p>Say hello to the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-segmentation/src/darts_segmentation/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return \"Hello from darts-segmentation!\"\n</code></pre>"},{"location":"ref/#darts_superresolution","title":"<code>darts_superresolution</code>","text":"<p>Image superresolution of Sentinel 2 imagery for the DARTS dataset.</p>"},{"location":"ref/#darts_superresolution-functions","title":"Functions","text":""},{"location":"ref/#darts_superresolution.hello","title":"<code>hello()</code>","text":"<p>Say hello to the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-superresolution/src/darts_superresolution/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return \"Hello from darts-superresolution!\"\n</code></pre>"},{"location":"darts-acquisition/quickstart/","title":"DARTS acquisition","text":"<p>Acquisition of data from various sources for the DARTS dataset.</p>"},{"location":"darts-acquisition/quickstart/#installation","title":"Installation","text":"<pre><code>pip install darts-acquisition\n</code></pre>"},{"location":"darts-acquisition/quickstart/#usage","title":"Usage","text":"<pre><code>import darts_acquisition\n</code></pre>"},{"location":"darts-acquisition/ref/","title":"Acquisition Reference","text":""},{"location":"darts-acquisition/ref/#darts_acquisition","title":"<code>darts_acquisition</code>","text":"<p>Acquisition of data from various sources for the DARTS dataset.</p>"},{"location":"darts-acquisition/ref/#darts_acquisition-functions","title":"Functions","text":""},{"location":"darts-acquisition/ref/#darts_acquisition.hello","title":"<code>hello(name)</code>","text":"<p>Say hello to the user.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the user.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-acquisition/src/darts_acquisition/__init__.py</code> <pre><code>def hello(name: str) -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Args:\n        name (str): Name of the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return f\"Hello, {name}, from darts-acquisition!\"\n</code></pre>"},{"location":"darts-ensemble/quickstart/","title":"DARTS ensemble","text":"<p>Inference and model ensembling for the DARTS dataset.</p>"},{"location":"darts-ensemble/quickstart/#installation","title":"Installation","text":"<pre><code>pip install darts-ensemble\n</code></pre>"},{"location":"darts-ensemble/quickstart/#usage","title":"Usage","text":"<pre><code>import darts_ensemble\n</code></pre>"},{"location":"darts-ensemble/ref/","title":"Ensemble Reference","text":""},{"location":"darts-ensemble/ref/#darts_ensemble","title":"<code>darts_ensemble</code>","text":"<p>Inference and model ensembling for the DARTS dataset.</p>"},{"location":"darts-ensemble/ref/#darts_ensemble-functions","title":"Functions","text":""},{"location":"darts-ensemble/ref/#darts_ensemble.hello","title":"<code>hello()</code>","text":"<p>Say hello to the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-ensemble/src/darts_ensemble/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return \"Hello from darts-ensemble!\"\n</code></pre>"},{"location":"darts-export/quickstart/","title":"DARTS export","text":"<p>Dataset export for the DARTS dataset.</p>"},{"location":"darts-export/quickstart/#installation","title":"Installation","text":"<pre><code>pip install darts-export\n</code></pre>"},{"location":"darts-export/quickstart/#usage","title":"Usage","text":"<pre><code>import darts_export\n</code></pre>"},{"location":"darts-export/ref/","title":"Export Reference","text":""},{"location":"darts-export/ref/#darts_export","title":"<code>darts_export</code>","text":"<p>Dataset export for the DARTS dataset.</p>"},{"location":"darts-export/ref/#darts_export-functions","title":"Functions","text":""},{"location":"darts-export/ref/#darts_export.hello","title":"<code>hello()</code>","text":"<p>Say hello to the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-export/src/darts_export/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return \"Hello from darts-export!\"\n</code></pre>"},{"location":"darts-preprocessing/quickstart/","title":"DARTS preprocessing","text":"<p>Data preprocessing and feature engineering for the DARTS dataset.</p>"},{"location":"darts-preprocessing/quickstart/#installation","title":"Installation","text":"<pre><code>pip install darts-preprocessing\n</code></pre>"},{"location":"darts-preprocessing/quickstart/#usage","title":"Usage","text":"<pre><code>import darts_preprocessing\n</code></pre>"},{"location":"darts-preprocessing/ref/","title":"Preprocessing Reference","text":""},{"location":"darts-preprocessing/ref/#darts_preprocessing","title":"<code>darts_preprocessing</code>","text":"<p>Data preprocessing and feature engineering for the DARTS dataset.</p>"},{"location":"darts-preprocessing/ref/#darts_preprocessing-functions","title":"Functions","text":""},{"location":"darts-preprocessing/ref/#darts_preprocessing.hello","title":"<code>hello()</code>","text":"<p>Say hello to the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-preprocessing/src/darts_preprocessing/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return \"Hello from darts-preprocessing!\"\n</code></pre>"},{"location":"darts-segmentation/quickstart/","title":"DARTS segmentation","text":"<p>Image segmentation of thaw-slumps for the DARTS dataset.</p>"},{"location":"darts-segmentation/quickstart/#installation","title":"Installation","text":"<pre><code>pip install darts-segmentation\n</code></pre>"},{"location":"darts-segmentation/quickstart/#usage","title":"Usage","text":"<pre><code>import darts_segmentation\n</code></pre>"},{"location":"darts-segmentation/ref/","title":"Export Reference","text":""},{"location":"darts-segmentation/ref/#darts_export","title":"<code>darts_export</code>","text":"<p>Dataset export for the DARTS dataset.</p>"},{"location":"darts-segmentation/ref/#darts_export-functions","title":"Functions","text":""},{"location":"darts-segmentation/ref/#darts_export.hello","title":"<code>hello()</code>","text":"<p>Say hello to the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-export/src/darts_export/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return \"Hello from darts-export!\"\n</code></pre>"},{"location":"darts-superresolution/quickstart/","title":"DARTS superresolution","text":"<p>Image superresolution of Sentinel 2 imagery for the DARTS dataset.</p>"},{"location":"darts-superresolution/quickstart/#installation","title":"Installation","text":"<pre><code>pip install darts-superresolution\n</code></pre>"},{"location":"darts-superresolution/quickstart/#usage","title":"Usage","text":"<pre><code>import darts_superresolution\n</code></pre>"},{"location":"darts-superresolution/ref/","title":"Superresolution Reference","text":""},{"location":"darts-superresolution/ref/#darts_superresolution","title":"<code>darts_superresolution</code>","text":"<p>Image superresolution of Sentinel 2 imagery for the DARTS dataset.</p>"},{"location":"darts-superresolution/ref/#darts_superresolution-functions","title":"Functions","text":""},{"location":"darts-superresolution/ref/#darts_superresolution.hello","title":"<code>hello()</code>","text":"<p>Say hello to the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Greating message.</p> Source code in <code>darts-superresolution/src/darts_superresolution/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Say hello to the user.\n\n    Returns:\n        str: Greating message.\n\n    \"\"\"\n    return \"Hello from darts-superresolution!\"\n</code></pre>"}]}